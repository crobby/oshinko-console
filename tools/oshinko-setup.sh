#!/bin/bash


while getopts :c:h opt; do
    case $opt in
        c)
            CONFIG_DIR=$OPTARG
            ;;
        h)
            echo "Usage: oshinko-setup.sh [-w <hostname to use in exposed route to oshinko-web]"
            echo "Example: oshinko-setup.sh -w mywebui.10.16.40.70.xip.io"
            echo "    results in the oshinko web service exposed at mywebui.10.16.40.70.xip.io"
            echo "If -w is not set, the default route will be used based on routing suffix, etc set at installation"
            echo ""
            echo "Usage: oshinko-setup.sh [-s <spark docker image to use for clusters>]"
            echo "Example: oshinko-setup.sh -s myregistry.com:5000/sparkimage"
            echo ""
            echo "Note, it is important that the version of spark used in the pyspark builder image"
            echo "matches the version used in clusters. Therefore, if the -s flag is specified the"
            echo "pyspark builder image will not be generated by this script. You may generate it"
            echo "yourself from the oshinko-s2i repository after modifying the Dockerfile accordingly".
            exit
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit
            ;;
    esac
done

# install some stuff we need for building
rpm -qa | grep -qw git || sudo dnf -y install git
rpm -qa | grep -qw docker || sudo dnf -y install docker
rpm -qa | grep -qw wget || sudo dnf -y install wget
rpm -qa | grep -qw tar || sudo dnf -y install tar

############ get the oshinko repos and build the images

sudo systemctl start docker 

CURRDIR=`pwd`
export GOPATH=$CURRDIR/oshinko

SRCDIR=$CURRDIR/oshinko/src/github.com/radanalyticsio
mkdir -p $SRCDIR
cd $SRCDIR
if [ ! -d "oshinko-console" ]; then
    git clone git@github.com:radanalyticsio/oshinko-console
fi

########### get the origin image and run oc cluster up
########### this part can be replaced with some other openshift install recipe


cd $CURRDIR
ORIGIN_VERSION=v1.4.0-rc1
ORIGIN_TARBALL=openshift-origin-client-tools-v1.4.0-rc1.b4e0954-linux-64bit.tar.gz
ORIGIN_DIR=${ORIGIN_TARBALL%.tar.gz}

if [ ! -d "$ORIGIN_DIR" ]; then
    wget https://github.com/openshift/origin/releases/download/$ORIGIN_VERSION/$ORIGIN_TARBALL
    tar -xvzf $ORIGIN_TARBALL
    sudo cp ${ORIGIN_DIR}/* /usr/bin
fi

sudo sed -i -e "/^# INSECURE_REGISTRY/{ s/.*/INSECURE_REGISTRY='--insecure-registry 172.30.0.0\/16'/ }" /etc/sysconfig/docker
sudo systemctl restart docker

# make sure your local host name can be resolved!
# put it in /etc/hosts if you have to, otherwise you will have no nodes
sudo oc cluster up --host-config-dir=$CONFIG_DIR
sudo oc cluster down
sudo cp $SRCDIR/oshinko/src/github.com/radanalyticsio/oshinko-console/dist/scripts/*.js $CONFIG_DIR/master
sudo cp $SRCDIR/oshinko/src/github.com/radanalyticsio/oshinko-console/dist/styles/*.css $CONFIG_DIR/master
sed -i -e "s/extensionDevelopment: false/extensionDevelopment: true/" $CONFIG_DIR/master/master-config.yaml
sed -i -e "s/extensionScripts: null/extensionScripts:\n    - templates.js\n    - scripts.js/" $CONFIG_DIR/master/master-config.yaml
sed -i -e "s/extensionStylesheets: null/extensionStylesheets:\n    - oshinko.css/" $CONFIG_DIR/master/master-config.yaml
sudo iptables -F
sudo oc cluster up --host-config-dir=$CONFIG_DIR --use-existing-config

############

# Push to a default oshinko project for a default oshinko user
oc login -u developer -p dev
oc new-project oshinko

# set up the oshinko service account
oc create sa oshinko                          # note, VV, first oshinko is the proj name :)
oc policy add-role-to-user admin system:serviceaccount:developer:oshinko -n oshinko

wget https://raw.githubusercontent.com/crobby/oshinko-tools/master/server-only-template.yaml | oc create -f
oc new-app --template=oshinko
